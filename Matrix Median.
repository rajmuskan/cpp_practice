int Solution::findMedian(vector<vector<int> > &A) {
    int n=A.size(); //rows
    int m= A[0].size(); //columns
    
    //find min
    int Min=INT_MAX;
    for(int i=0;i<n;i++){
        Min = min(Min, A[i][0]);
    }
    
    //find max
    int Max=INT_MIN;
    for(int i=0;i<n;i++){
        Max = max(Max, A[i][m-1]);
    }
    
    //apply binary search on the range of numbers from min to max
    int desired = (n*m+1)/2; //actual position of median in sorted array.
    //desired number of elements will be smaller than or equal to median.
    //this will help us determine whether we need to go to left half or right half of the range.
    
    while(Min<=Max){
        int mid = Min + (Max-Min)/2; // mid element
        int count=0; // its position
        for(int i=0;i<n;i++){
            count+=upper_bound(A[i].begin(),A[i].end(),mid)-A[i].begin();
        }
        if(count<desired){
            Min=mid+1;
        }else{
            Max=mid-1;
        }
    }
    return Min;
}
