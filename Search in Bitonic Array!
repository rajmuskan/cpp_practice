int binarySearchAscending(vector<int> &A, int start, int end, int B){
  while(start<=end){
    int mid = start + (end-start)/2;
    if(A[mid]==B){
      return mid;
    }
    if(A[mid]<B){
      start = mid+1;
    }else{
      end = mid-1;
    }
  }
  return -1;
}

int binarySearchDescending(vector<int> &A, int start, int end, int B){
  while(start<=end){
    int mid = start + (end-start)/2;
    if(A[mid]==B){
      return mid;
    }
    if(A[mid]<B){
      end = mid-1;
    }else{
      start = mid+1;
    }
  }
  return -1;
}

int Solution::solve(vector<int> &A, int B) {
  int n =A.size();
  int start=0;
  int end=n-1;
  int bitonic_point=0;
  while(start<=end){
    int mid=start+(end-start)/2;
    if((mid==n-1 || A[mid]>A[mid+1]) && (mid==0 || A[mid]>A[mid-1])){
      bitonic_point=mid;
      break;
    }
    if(A[mid]>A[mid-1] && A[mid]<A[mid+1]){
      start=mid+1;
    }else if(A[mid]<A[mid-1] && A[mid]>A[mid+1]){
      end=mid-1;
    }
  }
  //cout<<"bitonic_point"<<bitonic_point<<endl;
  
  //case 1
  if(B==A[bitonic_point]){
    return bitonic_point;
  }
  //case 2 -> left side of bitonic point
  int index1 = binarySearchAscending(A,0,bitonic_point-1,B);
  if(index1!=-1){
    return index1;
  }
  //case 3 -> right side of bitonic point
  int index2 = binarySearchDescending(A,bitonic_point+1,n-1,B);
  if(index2!=-1){
    return index2;
  }
  //if B does not exist in A.
  return -1;
}
